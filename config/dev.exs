import Config

# Configure your database
config :wanderer_app, WandererApp.Repo,
  username: "postgres",
  password: "postgres",
  hostname: System.get_env("DB_HOST", "localhost"),
  database: "wanderer_dev",
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: 10

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :wanderer_app, WandererAppWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {0, 0, 0, 0}, port: 4444],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "gnfLCueSfLAkvP1m2Y/wNa+YoCf6nxaWlalFQYkZ4KYRKQk7SzsUL+7NzuRjRiIs",
  watchers: [
    npm: ["run", "watch", cd: Path.expand("../assets", __DIR__)]
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
# Disable if running in CI or if inotify-tools is not available
# Check for common CI environment variables and container environments
is_ci = System.get_env("CI") ||
        System.get_env("GITHUB_ACTIONS") ||
        File.exists?("/.dockerenv") ||
        System.get_env("CONTAINER") == "true"

has_inotify = System.find_executable("inotifywait") != nil

live_reload_config =
  if is_ci || !has_inotify do
    []
  else
    [
      live_reload: [
        interval: 1000,
        patterns: [
          ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
          ~r"priv/gettext/.*(po)$",
          ~r"lib/wanderer_app_web/(controllers|live|components)/.*(ex|heex)$"
        ]
      ]
    ]
  end

config :wanderer_app, WandererAppWeb.Endpoint, live_reload_config

config :wanderer_app,
  dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Include HEEx debug annotations as HTML comments in rendered markup
config :phoenix_live_view, :debug_heex_annotations, true

# Disable swoosh api client as it is only required for production adapters.
config :swoosh, :api_client, false

# Configure exsync to disable source monitoring if inotify-tools is not available
# This prevents startup errors in CI environments
if is_ci || !has_inotify do
  config :exsync, src_monitor: false
end

config :logger, :console,
  level: :info,
  format: "$time $metadata[$level] $message\n"

# WandererKills service configuration (WebSocket-based)
config :wanderer_app,
  # Enable WandererKills service integration
  wanderer_kills_service_enabled: true,

  # WebSocket connection URL for WandererKills service
  wanderer_kills_base_url:
    System.get_env("WANDERER_KILLS_BASE_URL", "ws://host.docker.internal:4004")
